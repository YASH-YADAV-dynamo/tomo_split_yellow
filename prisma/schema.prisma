// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  password     String
  avatar       String?
  walletAddress String? @unique // Ethereum wallet address
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  groupMemberships GroupMember[]
  expenses         Expense[]
  settlements      Settlement[] @relation("SettlementFrom")
  receivedSettlements Settlement[] @relation("SettlementTo")

  @@map("users")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members   GroupMember[]
  expenses  Expense[]

  @@map("groups")
}

model GroupMember {
  id      String @id @default(cuid())
  userId  String
  groupId String
  role    String @default("member") // member, admin

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Decimal  @db.Decimal(10, 2)
  currency    String   @default("USD")
  paidById    String
  groupId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  paidBy User           @relation(fields: [paidById], references: [id])
  group  Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  splits ExpenseSplit[]

  @@map("expenses")
}

model ExpenseSplit {
  id        String  @id @default(cuid())
  expenseId String
  userId    String
  amount    Decimal @db.Decimal(10, 2)
  isPaid    Boolean @default(false)

  // Relations
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
  @@map("expense_splits")
}

model Settlement {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  amount    Decimal  @db.Decimal(10, 2)
  currency  String   @default("USD")
  isPaid    Boolean  @default(false)
  paidAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  from User @relation("SettlementFrom", fields: [fromId], references: [id])
  to   User @relation("SettlementTo", fields: [toId], references: [id])

  @@map("settlements")
}